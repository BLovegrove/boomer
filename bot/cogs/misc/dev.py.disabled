import logging

import discord
from discord import app_commands
from discord.app_commands import checks
from discord.ext import commands

import config as cfg

from ...util.models.client import LavaBotClient


class Dev(commands.Cog):
    def __init__(self, bot: LavaBotClient) -> None:
        self.bot = bot

    @app_commands.command(
        description=f"A series of developer commands for {cfg.bot.name}. BE CAREFUL WITH THESE."
    )
    @app_commands.describe(
        subcode="Runs a series of dev actions without cluttering the commands list."
    )
    @app_commands.choices(
        subcode=[
            app_commands.Choice(name="Kill bot", value="die"),
            app_commands.Choice(name="Ping test", value="ping"),
        ]
    )
    @checks.has_role(1001722386976084071)
    async def dev(
        self, interaction: discord.Interaction, subcode: app_commands.Choice[str]
    ):
        await interaction.response.defer(ephemeral=True)

        match (subcode):
            case "die":
                # disconnect voice

                await interaction.followup.send(
                    content=f"Success! {cfg.bot.name} now rebooting. Wait until they're online again before running more commands.",
                    ephemeral=False,
                )

                if cfg.dev.deregister_on_close:
                    logging.info("Deregistering commands...")
                    commands = self.bot.get_all_application_commands()
                    for command in commands:
                        await self.bot.delete_application_commands(
                            command, guild_id=cfg.bot.guild_id
                        )

                await self.bot.close()
                return

            case "ping":
                await interaction.followup.send(f"Pong! ({self.bot.pin}ms)")

                return


def setup(bot):
    bot.add_cog(Dev(bot))
